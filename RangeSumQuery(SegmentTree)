class NumArray {
    vector<int>segmentTree;
    int size;
    void ST(vector<int>& nums,int index,int l,int r){
        if(l == r){
            cout<<index<<":"<<l<<endl;
            segmentTree[index] = nums[l];
            return;
        }
        // if(l > r)return;

        int mid = (l+r)/2;
        ST(nums,2*index+1,l,mid);
        ST(nums,2*index+2,mid+1,r);
        segmentTree[index] = segmentTree[2*index+1]+segmentTree[2*index+2];
    }

    void updateST(int index,int l,int r,int i,int val){
        if(l == r){
            segmentTree[index] = val;
            return;
        }
        // cout<<l<<":"<<r<<endl;
        if(l > r)return;


        int mid = (l+r)/2;
        if(mid >= i)updateST(2*index+1,l,mid,i,val);
        else updateST(2*index+2,mid+1,r,i,val);
        segmentTree[index] = segmentTree[2*index+1]+segmentTree[2*index+2];
    }

    int rangeSum(int index,int l,int r,int s,int e){
        if(l > e || r < s)return 0;
        if(l >= s && r <= e)return segmentTree[index];
        int mid = (l+r)/2;
        return rangeSum(2*index+1,l,mid,s,e)+rangeSum(2*index+2,mid+1,r,s,e);
    }

public:

    NumArray(vector<int>& nums) {
        vector<int>temp(4*nums.size());
        segmentTree = temp;
        size = nums.size();
        ST(nums,0,0,nums.size()-1);
        // for(int i = 0; i < segmentTree.size(); i++){
        //     cout<<segmentTree[i]<<" ";
        // }
        // cout<<endl;
    }

    
    
    void update(int index, int val) {
        updateST(0,0,size-1,index,val);
        // for(int i = 0; i < segmentTree.size(); i++){
        //     cout<<segmentTree[i]<<" ";
        // }
        // cout<<endl;
    }
    
    int sumRange(int left, int right) {
        return rangeSum(0,0,size-1,left,right);
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * obj->update(index,val);
 * int param_2 = obj->sumRange(left,right);
 */
